[{"C:\\Users\\savnc\\repos\\react-repos\\react_props_state\\src\\App.jsx":"1","C:\\Users\\savnc\\repos\\react-repos\\react_props_state\\src\\components\\Box.jsx":"2"},{"size":1691,"mtime":1649358212460,"results":"3","hashOfConfig":"4"},{"size":488,"mtime":1649353868119,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"dl3m8u",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\savnc\\repos\\react-repos\\react_props_state\\src\\App.jsx",["12"],"import \"./App.css\";\r\nimport { Component } from \"react\";\r\nimport Box from \"./components/Box\"\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // set default state\r\n    let boxes = [];\r\n    let numBoxes = 24;\r\n   let i = 0\r\n    //iterate through boxes\r\n\r\n    for (i = 0, i < numBoxes; i++;) {\r\n      boxes.push({\r\n        id: i,\r\n        color: `rgb(${this.getRandomColor()}, ${this.getRandomColor()}, ${this.getRandomColor()})`\r\n    }); \r\n    }\r\n    this.state = {\r\n      boxes\r\n    };\r\n    // bind methods to this\r\n    this.handleBoxClick = this.handleBoxClick.bind(this);\r\n\r\n  }\r\n  handleBoxClick(e){\r\n    const newBoxes = this.state.boxes.map((box) => {\r\n      //only change color for specified 1 box\r\n    if (box.id === e.target.id) {\r\n     box.color = `rgb(${this.getRandomColor()}, ${this.getRandomColor()}, ${this.getRandomColor()})`\r\n    }\r\n    return box;\r\n    });\r\n    this.setState({boxes: newBoxes})\r\n  }\r\n  //random color assignment\r\n  getRandomColor() {\r\n    const rgb = (Math.round(Math.random() * 255));\r\n      return rgb;\r\n  }\r\n  render() {\r\n     //iterates over boxes and assigns props\r\n     const renderBoxes = this.state.boxes.map((box) => (\r\n      <Box\r\n        key={box.id}\r\n        id={box.id}\r\n        color={box.color}\r\n        handleClick={this.handleBoxClick}\r\n      />\r\n    ));\r\n    return (\r\n      <main\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          flexDirection: \"column\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <h1>React: State and Props</h1>\r\n        <div className=\"App\">{/* render boxes */}</div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\savnc\\repos\\react-repos\\react_props_state\\src\\components\\Box.jsx",["13"],"import * as React from \"react\";\r\n\r\nconst Box = (props) => {\r\n  return (\r\n    <div \r\n      style={{\r\n        width: \"180px\",\r\n        height: \"180px\",\r\n        backgroundColor: props.color,\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        backgroundColor: \"prop.color\"\r\n      }}\r\n      onClick = {props.handleClick}\r\n      id = {props.id}\r\n    > {/* Adds rgb value from props*/}\r\n      <span>{props.color}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Box;\r\n",{"ruleId":"14","severity":1,"message":"15","line":45,"column":12,"nodeType":"16","messageId":"17","endLine":45,"endColumn":23},{"ruleId":"18","severity":1,"message":"19","line":12,"column":9,"nodeType":"20","messageId":"21","endLine":12,"endColumn":24},"no-unused-vars","'renderBoxes' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected"]